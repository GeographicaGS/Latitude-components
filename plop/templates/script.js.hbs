/**
 *  {{pascalCase name}} script file
**/

{{#if store}}
import { mapState, mapActions, mapGetters } from 'vuex'

import { MODULE_NAME, ACTIONS, GETTERS } from './constants'
import rootStore from '@/store'
import store from './store'

{{/if}}

export default {
  name: 'Ltd{{pascalCase name}}', // web-component: ltd-{{camelCase name}}
  mixins: [],
  components: {},
  props: {
    /**
    * Sets style
    */
    customStyle: {
      type: Object,
    },
  },
  data () {
    return {}
  },
  {{#if store}}
  beforeCreate () {
    if (!(rootStore && rootStore.state && rootStore.state[MODULE_NAME])) {
      rootStore.registerModule(MODULE_NAME, store)
    }
  },
  {{/if}}
  computed: {
    {{#if store}}
    ...mapState(MODULE_NAME, {
      stateDefault: state => state
    }),
    ...mapGetters(MODULE_NAME, {
      gettersDefault: GETTERS.gettersDefault
    })
    {{/if}}
  },
  methods: {
    {{#if store}}
    ...mapActions(MODULE_NAME, {
      actionsDefault: ACTIONS.actionsDefault
    })
    {{/if}}
    /**
     * Gets custom styles
     */
    getStyle () {
      const style = `
        ${Object.entries(this.customStyle).map(values => {
          const [key, value] = values;
          return `.${key} {${this.generateStyle(value)}}`
        }).join('\n')}`

        const el = document.createElement('style')
        // const shadow = this.attachShadow()
        el.innerHTML = style
        this.$el.parentNode.insertBefore(el, null)
    },
    /**
     * Generate style by object
     *
     * @property {Object}
     * @type {String}
     */
    generateStyle (data) {
      return `
        ${Object.entries(data).map(values => {
          const [key, value] = values;
          return `${key}: ${value}`;
        }).join(';')};`
    }
  },
  watch: {
    customStyle () {
      this.getStyle();
    }
  }
}
